// Generated by Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
#ifndef ACTANTSDK_SWIFT_H
#define ACTANTSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ARKit;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import SceneKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ActantSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


@protocol SCNSceneRenderer;
@class SCNScene;

SWIFT_PROTOCOL("_TtP9ActantSDK30ActantSCNSceneRendererDelegate_")
@protocol ActantSCNSceneRendererDelegate
@optional
/// @method renderer:updateAtTime:
/// @abstract Implement this to perform per-frame game logic. Called exactly once per frame before any animation and actions are evaluated and any physics are simulated.
/// @param renderer The renderer that will render the scene.
/// @param time The time at which to update the scene.
/// @discussion All modifications done within this method don’t go through the transaction model, they are directly applied on the presentation tree.
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer updateAtTime:(NSTimeInterval)time;
/// @method renderer:didApplyAnimationsAtTime:
/// @abstract Invoked on the delegate once the scene renderer did apply the animations.
/// @param renderer The renderer that did render the scene.
/// @param time The time at which the animations were applied.
/// @discussion All modifications done within this method don’t go through the transaction model, they are directly applied on the presentation tree.
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer didApplyAnimationsAtTime:(NSTimeInterval)time;
/// @method renderer:didSimulatePhysicsAtTime:
/// @abstract Invoked on the delegate once the scene renderer did simulate the physics.
/// @param renderer The renderer that did render the scene.
/// @param time The time at which the physics were simulated.
/// @discussion All modifications done within this method don’t go through the transaction model, they are directly applied on the presentation tree.
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer didSimulatePhysicsAtTime:(NSTimeInterval)time;
/// @method renderer:didApplyConstraintsAtTime:
/// @abstract Invoked on the delegate once the scene renderer did apply the constraints.
/// @param renderer The renderer that did render the scene.
/// @param time The time at which the constraints were simulated.
/// @discussion All modifications done within this method don’t go through the transaction model, they are directly applied on the presentation tree.
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer didApplyConstraintsAtTime:(NSTimeInterval)time SWIFT_AVAILABILITY(ios,introduced=11.0);
/// @method renderer:willRenderScene:atTime:
/// @abstract Invoked on the delegate before the scene renderer renders the scene. At this point the openGL context and the destination framebuffer are bound.
/// @param renderer The renderer that will render the scene.
/// @param scene The scene to be rendered.
/// @param time The time at which the scene is to be rendered.
/// @discussion Starting in 10.10 all modifications done within this method don’t go through the transaction model, they are directly applied on the presentation tree.
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer willRenderScene:(SCNScene * _Nonnull)scene atTime:(NSTimeInterval)time;
/// @method renderer:didRenderScene:atTime:
/// @abstract Invoked on the delegate once the scene renderer did render the scene.
/// @param renderer The renderer that did render the scene.
/// @param scene The rendered scene.
/// @param time The time at which the scene was rendered.
/// @discussion Starting in 10.10 all modifications done within this method don’t go through the transaction model, they are directly applied on the presentation tree.
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer didRenderScene:(SCNScene * _Nonnull)scene atTime:(NSTimeInterval)time;
@end

@class ARSession;
@class ARCamera;
@class NSNumber;
@class ARCollaborationData;
@class ARGeoTrackingStatus;

SWIFT_PROTOCOL("_TtP9ActantSDK23ActantARSessionObserver_")
@protocol ActantARSessionObserver
@optional
/// This is called when a session fails.
/// @discussion On failure the session will be paused.
/// @param session The session that failed.
/// @param error The error being reported (see ARError.h).
- (void)session:(ARSession * _Nonnull)session didFailWithError:(NSError * _Nonnull)error;
/// This is called when the camera’s tracking state has changed.
/// @param session The session being run.
/// @param camera The camera that changed tracking states.
- (void)session:(ARSession * _Nonnull)session cameraDidChangeTrackingState:(ARCamera * _Nonnull)camera;
/// This is called when a session is interrupted.
/// A session will be interrupted and no longer able to track when
/// it fails to receive required sensor data. This happens when video capture is interrupted,
/// for example when the application is sent to the background or when there are
/// multiple foreground applications (see AVCaptureSessionInterruptionReason).
/// No additional frame updates will be delivered until the interruption has ended.
/// @param session The session that was interrupted.
- (void)sessionWasInterrupted:(ARSession * _Nonnull)session;
/// This is called when a session interruption has ended.
/// @discussion A session will continue running from the last known state once
/// the interruption has ended. If the device has moved, anchors will be misaligned.
/// To avoid this, some applications may want to reset tracking (see ARSessionRunOptions)
/// or attempt to relocalize (see <code>-[ActantARSessionObserver sessionShouldAttemptRelocalization:]</code>).
/// @param session The session that was interrupted.
- (void)sessionInterruptionEnded:(ARSession * _Nonnull)session;
/// This is called after a session resumes from a pause or interruption to determine
/// whether or not the session should attempt to relocalize.
/// @discussion To avoid misaligned anchors, apps may wish to attempt a relocalization after
/// a session pause or interruption. If YES is returned: the session will begin relocalizing
/// and tracking state will switch to limited with reason relocalizing. If successful, the
/// session’s tracking state will return to normal. Because relocalization depends on
/// the user’s location, it can run indefinitely. Apps that wish to give up on relocalization
/// may call run with <code>ARSessionRunOptionResetTracking</code> at any time.
/// @param session The session to relocalize.
/// @return Return YES to begin relocalizing.
- (BOOL)sessionShouldAttemptRelocalization:(ARSession * _Nonnull)session SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=11.3);
/// This is called when the session outputs a new audio sample buffer.
/// @param session The session being run.
/// @param audioSampleBuffer The captured audio sample buffer.
- (void)session:(ARSession * _Nonnull)session didOutputAudioSampleBuffer:(CMSampleBufferRef _Nonnull)audioSampleBuffer;
/// This is called when the session generated new collaboration data.
/// @discussion This data should be sent to all participants.
/// @param session The session that produced world tracking collaboration data.
/// @param data Collaboration data to be sent to participants.
/// @see ARCollaborationData
- (void)session:(ARSession * _Nonnull)session didOutputCollaborationData:(ARCollaborationData * _Nonnull)data SWIFT_AVAILABILITY(ios,introduced=13.0);
/// This is called when geo tracking status changes.
/// @param session The session being run.
/// @param geoTrackingStatus Latest geo tracking status.
- (void)session:(ARSession * _Nonnull)session didChange:(ARGeoTrackingStatus * _Nonnull)geoTrackingStatus SWIFT_AVAILABILITY(ios,introduced=14.0);
@end

@class ARAnchor;
@class SCNNode;

SWIFT_PROTOCOL("_TtP9ActantSDK23ActantARSCNViewDelegate_")
@protocol ActantARSCNViewDelegate <ActantARSessionObserver, ActantSCNSceneRendererDelegate>
@optional
/// Implement this to provide a custom node for the given anchor.
/// @discussion This node will automatically be added to the scene graph.
/// If this method is not implemented, a node will be automatically created.
/// If nil is returned the anchor will be ignored.
/// @param renderer The renderer that will render the scene.
/// @param anchor The added anchor.
/// @return Node that will be mapped to the anchor or nil.
- (SCNNode * _Nullable)renderer:(id <SCNSceneRenderer> _Nonnull)renderer nodeFor:(ARAnchor * _Nonnull)anchor SWIFT_WARN_UNUSED_RESULT;
/// Called when a new node has been mapped to the given anchor.
/// @param renderer The renderer that will render the scene.
/// @param node The node that maps to the anchor.
/// @param anchor The added anchor.
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer didAdd:(SCNNode * _Nonnull)node for:(ARAnchor * _Nonnull)anchor;
/// Called when a node will be updated with data from the given anchor.
/// @param renderer The renderer that will render the scene.
/// @param node The node that will be updated.
/// @param anchor The anchor that was updated.
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer willUpdate:(SCNNode * _Nonnull)node for:(ARAnchor * _Nonnull)anchor;
/// Called when a node has been updated with data from the given anchor.
/// @param renderer The renderer that will render the scene.
/// @param node The node that was updated.
/// @param anchor The anchor that was updated.
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer didUpdate:(SCNNode * _Nonnull)node for:(ARAnchor * _Nonnull)anchor;
/// Called when a mapped node has been removed from the scene graph for the given anchor.
/// @param renderer The renderer that will render the scene.
/// @param node The node that was removed.
/// @param anchor The anchor that was removed.
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer didRemove:(SCNNode * _Nonnull)node for:(ARAnchor * _Nonnull)anchor;
@end

@class ARFrame;

SWIFT_PROTOCOL("_TtP9ActantSDK23ActantARSessionDelegate_")
@protocol ActantARSessionDelegate <ActantARSessionObserver>
@optional
/// This is called when a new frame has been updated.
/// @param session The session being run.
/// @param frame The frame that has been updated.
- (void)session:(ARSession * _Nonnull)session didUpdateFrame:(ARFrame * _Nonnull)didUpdateFrame;
/// This is called when new anchors are added to the session.
/// @param session The session being run.
/// @param anchors An array of added anchors.
- (void)session:(ARSession * _Nonnull)session didAdd:(NSArray<ARAnchor *> * _Nonnull)anchors;
/// This is called when anchors are updated.
/// @param session The session being run.
/// @param anchors An array of updated anchors.
- (void)session:(ARSession * _Nonnull)session didUpdate:(NSArray<ARAnchor *> * _Nonnull)anchors;
/// This is called when anchors are removed from the session.
/// @param session The session being run.
/// @param anchors An array of removed anchors.
- (void)session:(ARSession * _Nonnull)session didRemove:(NSArray<ARAnchor *> * _Nonnull)anchors;
@end




SWIFT_CLASS("_TtC9ActantSDK9ArAdapter")
@interface ArAdapter : NSObject <ARSCNViewDelegate, ARSessionDelegate>
- (void)session:(ARSession * _Nonnull)session didUpdateFrame:(ARFrame * _Nonnull)frame;
- (void)session:(ARSession * _Nonnull)session didAddAnchors:(NSArray<ARAnchor *> * _Nonnull)anchors;
- (void)session:(ARSession * _Nonnull)session didUpdateAnchors:(NSArray<ARAnchor *> * _Nonnull)anchors;
- (void)session:(ARSession * _Nonnull)session didRemoveAnchors:(NSArray<ARAnchor *> * _Nonnull)anchors;
- (void)session:(ARSession * _Nonnull)session didFailWithError:(NSError * _Nonnull)error;
- (void)session:(ARSession * _Nonnull)session cameraDidChangeTrackingState:(ARCamera * _Nonnull)camera;
- (void)sessionWasInterrupted:(ARSession * _Nonnull)session;
- (void)sessionInterruptionEnded:(ARSession * _Nonnull)session;
- (BOOL)sessionShouldAttemptRelocalization:(ARSession * _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
- (void)session:(ARSession * _Nonnull)session didOutputAudioSampleBuffer:(CMSampleBufferRef _Nonnull)audioSampleBuffer;
- (void)session:(ARSession * _Nonnull)session didOutputCollaborationData:(ARCollaborationData * _Nonnull)data;
- (void)session:(ARSession * _Nonnull)session didChangeGeoTrackingStatus:(ARGeoTrackingStatus * _Nonnull)geoTrackingStatus;
- (SCNNode * _Nullable)renderer:(id <SCNSceneRenderer> _Nonnull)renderer nodeForAnchor:(ARAnchor * _Nonnull)anchor SWIFT_WARN_UNUSED_RESULT;
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer didAddNode:(SCNNode * _Nonnull)node forAnchor:(ARAnchor * _Nonnull)anchor;
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer willUpdateNode:(SCNNode * _Nonnull)node forAnchor:(ARAnchor * _Nonnull)anchor;
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer didUpdateNode:(SCNNode * _Nonnull)node forAnchor:(ARAnchor * _Nonnull)anchor;
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer didRemoveNode:(SCNNode * _Nonnull)node forAnchor:(ARAnchor * _Nonnull)anchor;
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer updateAtTime:(NSTimeInterval)time;
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer didApplyAnimationsAtTime:(NSTimeInterval)time;
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer didSimulatePhysicsAtTime:(NSTimeInterval)time;
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer didApplyConstraintsAtTime:(NSTimeInterval)time;
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer willRenderScene:(SCNScene * _Nonnull)scene atTime:(NSTimeInterval)time;
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer didRenderScene:(SCNScene * _Nonnull)scene atTime:(NSTimeInterval)time;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSString;
enum LogLevel : NSInteger;
@class VirtualMapNode;
@class VirtualObjectNode;

SWIFT_PROTOCOL("_TtP9ActantSDK17ArAdapterDelegate_")
@protocol ArAdapterDelegate
@optional
- (void)onArStarted:(NSString * _Nonnull)sessionId;
- (void)onArStopped:(NSString * _Nonnull)sessionId;
- (void)onArMessageWithLogLevel:(enum LogLevel)logLevel message:(NSString * _Nonnull)message;
- (void)onHudEnabledWithEnabled:(BOOL)enabled;
- (void)onPlaneOnAlignment:(ARPlaneAnchorAlignment)alignment lastWorldTransform:(simd_float4x4)lastWorldTransform;
- (void)onPlaneOffWithLastWorldTransform:(simd_float4x4)lastWorldTransform;
- (void)onDebugTelemetryWithMessage:(NSString * _Nonnull)message;
- (void)onDebugVirtualMapsWithMessage:(NSString * _Nonnull)message;
- (void)onVirtualMapLocatedWithVirtualMapNode:(VirtualMapNode * _Nonnull)virtualMapNode;
- (void)onVirtualObjectNodeAdded:(VirtualObjectNode * _Nonnull)virtualObjectNode;
- (void)onVirtualObjectNodeDeleted:(VirtualObjectNode * _Nonnull)virtualObjectNode;
@end

@class NSCoder;

/// An <code>SCNNode</code> which is used to provide uses with visual cues about the status of ARKit world tracking.
SWIFT_CLASS("_TtC9ActantSDK7HudNode")
@interface HudNode : SCNNode
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end






SWIFT_CLASS("_TtC9ActantSDK14VirtualMapNode")
@interface VirtualMapNode : SCNNode
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9ActantSDK17VirtualObjectNode")
@interface VirtualObjectNode : SCNNode
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
